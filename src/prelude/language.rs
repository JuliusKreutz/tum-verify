use crate::serenity;
use enum_iterator::Sequence;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, PartialEq, Eq, Serialize, Deserialize, Sequence)]
pub enum Language {
    German,
    English,
    Russian,
}

impl Language {
    pub fn init_message(guild: &serenity::PartialGuild) -> String {
        format!("
            :flag_de: Willkommen an den **{0}** Server! Wenn Sie die Verifikationsanleitungen auf **Deutsch** haben wollen, dr√ºcken Sie unter der Nachricht auf die Deutsche Flagge.

            :flag_gb: Welcome to the **{0}** server! If you want to proceed with the **English** verification instructions, please press the button of the United Kingdom below.

            :flag_ru: –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä ¬´{0}¬ª. –ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Å _—Ä—É—Å—Å–∫–æ–π_ –≤–µ—Ä—Å–∏–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Ñ–ª–∞–≥ –†–æ—Å—Å–∏–∏ —Å–Ω–∏–∑—É.
        ", &guild.name)
    }

    pub fn emoji(&self) -> serenity::ReactionType {
        match self {
            Language::German => serenity::ReactionType::Unicode("üá©üá™".to_string()),
            Language::English => serenity::ReactionType::Unicode("üá¨üáß".to_string()),
            Language::Russian => serenity::ReactionType::Unicode("üá∑üá∫".to_string())
        }
    }

    pub fn btn_enter(&self) -> String {
        match self {
            Language::German => "Eingeben".to_string(),
            Language::English => "Enter".to_string(),
            Language::Russian => "–í–≤–æ–¥".to_string(),    
        }
    }

    pub fn btn_abort(&self) -> String {
        match self {
            Language::German => "Abbrechen".to_string(),
            Language::English => "Abort".to_string(),
            Language::Russian => "–û—Ç–º–µ–Ω–∏—Ç—å".to_string(),
        }
    }

    pub fn text_tum_id(&self) -> String {
        match self {
            Language::German => "TUM Kennung".to_string(),
            Language::English => "TUM Id".to_string(),
            Language::Russian => "–¢–£–ú –õ–æ–≥–∏–Ω".to_string(),
        }
    }

    pub fn text_click_btn_for_tum_id(&self) -> String {
        match self {
            Language::German => "Um mit der Verifikation zu starten, bitte dr√ºcken Sie auf den Knopf unten und geben Sie Ihre TUM Id ein.".to_string(),
            Language::English => "To start with the verification process, please click the button below and provide your tum id.".to_string(),
            Language::Russian => "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É –∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –¢–£–ú-–æ–≤—ã–π –∫–æ–¥.".to_string(),
        }
    }

    pub fn text_click_btn_for_tum_id_err(&self) -> String {
        let r = format!("{}\n\n", self.text_click_btn_for_tum_id());
        match self {
            Language::German => r + ":warning: Falsches Format der TUM Kennung (ge69tum)",
            Language::English => r + ":warning: Wrong TUM Id format (ge69tum)",
            Language::Russian => r + ":warning: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¢–£–ú–∞ (ge69tum)",
        }
    }

    pub fn text_email_sent(&self, tum_id: &str) -> String {
        match self {
            Language::German => format!(
                "
                Eine Email wurde an Ihre TUM-Email geschickt. Bitte schreiben Sie den dort angegebenen code hier rein \
                ([TUM-Email Anleitung](https://campus.tum.de/tumonline/ee/ui/ca2/app/desktop/#/pl/ui/$ctx/help.file_help?$ctx=design=ca2;header=max;lang=de&app_kb=BM&corg=&seite_nr=500231&sprache_nr=1 'TUM-Email Anleitung')). \
                Email verschickt an:
                ```\n{tum_id}@mytum.de\n```
                "
            ),
            Language::English => format!(
                "
                An email has been sent to your TUM-account. Please send the code contained within into this channel \
                ([TUM-Email Guide](https://campus.tum.de/tumonline/ee/ui/ca2/app/desktop/#/pl/ui/$ctx/help.file_help?$ctx=design=ca2;header=max;lang=de&app_kb=BM&corg=&seite_nr=500231&sprache_nr=1 'How to access your TUM-Email')). \
                Email sent to:
                ```\n{tum_id}@mytum.de\n```
                "
            ),

            Language::Russian => format!(
                "
                –ù–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –¢–£–ú–∞ –±—ã–ª –≤—ã—Å–ª–∞–Ω —ç-–º–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª. \
                ([TUM-Email Guide](https://campus.tum.de/tumonline/ee/ui/ca2/app/desktop/#/pl/ui/$ctx/help.file_help?$ctx=design=ca2;header=max;lang=de&app_kb=BM&corg=&seite_nr=500231&sprache_nr=1 'How to access your TUM-Email')). \
                –ö–æ–¥ –≤—ã—Å–ª–∞–Ω –Ω–∞:
                ```\n{tum_id}@mytum.de\n```
                "
            ),
        }
    }

    pub fn text_token_err(&self, tum_id: &str) -> String {
        let r = format!("{}\n", self.text_email_sent(tum_id));
        match self {
            Language::German => r + ":warning: Ung√ºltiger token eingegeben. Bitte geben Sie den Token ein, den Sie in der email gekriegt haben.",
            Language::English => r + ":warning: Invalid token entered. Please provide the token, which you created in your email.",
            Language::Russian => r + ":warning: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤ –≤–∞—à–µ–º –µ –º–µ–π–ª–µ.",            
        }
    }

    pub fn text_success(&self) -> String {
        match self {
            Language::German => {
                "Sie sind jetzt verifiziert und haben Zugang zu Servern des TUM Netzwerks."
                    .to_string()
            }
            Language::English => {
                "You are now verified and have access to servers within the TUM Network."
                    .to_string()
            }
            Language::Russian => {
                "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞ –∏ —É –≤–∞—Å —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä–∞–º –¢–£–ú–∞."
                    .to_string()
            }
        }
    }

    pub fn text_token(&self) -> String {
        "Token".to_string()
    }

    pub fn title_network_verification(&self) -> String {
        match self {
            Language::German => "(Studentenorganisierter) TUM Discord ‚óã Verifikation".to_string(),
            Language::English => "(Student-run) TUM Discord ‚óã Verification".to_string(),
            Language::Russian => "–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –î–∏—Å–∫–æ—Ä–¥ –¢–£–ú–∞ ‚óã –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è".to_string(),
        }
    }

    pub fn title_email(&self) -> String {
        match self {
            Language::German => "TUM Discord Netzwerk ‚óã Verifikations Code".to_string(),
            Language::English => "TUM Discord Network ‚óã Verification Code".to_string(),
            Language::Russian => "–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –î–∏—Å–∫–æ—Ä–¥ –¢–£–ú–∞ ‚óã –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥".to_string(),
        }
    }

    pub fn text_email(&self) -> String {
        match self {
            Language::German => {
                "Jemand hat deine TUM-Kennung verwendet, um auf dein Studenten-Netzwerk im Discord zuzugreifen. Wenn das nicht Sie waren, bitte ignorieren Sie die email."
                    .to_string()
            }
            Language::English => {
                "Someone used your TUM Id to sign up to the student-run TUM Discord Network. If this was not you, please ignore this email.".to_string()
            }
            Language::Russian => {
                "–ö—Ç–æ-—Ç–æ –≤–æ—à—ë–ª –≤ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –¥–∏—Å–∫–æ—Ä–¥ —Å–µ—Ä–≤–µ—Ä —Å –≤–∞—à–µ–º –¢–£–ú Id. –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∏ –Ω–µ –≤—ã —Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.".to_string()
            }
        }
    }

    pub fn text_email_user(&self) -> String {
        match self {
            Language::German => "Nutzer".to_string(),
            Language::English => "User".to_string(),
            Language::Russian => "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å".to_string(),
        }
    }

    pub fn text_email_token(&self) -> String {
        match self {
            Language::German => "UNTEN FINDEN SIE DEN TOKEN ANGEH√ÑNGT AN DIE EMAIL".to_string(),
            Language::English => "BELOW YOU CAN FIND THE TOKEN ATTACHED TO THE EMAIL".to_string(),
            Language::Russian => "–í–ù–ò–ó–£ –í –ï-–ú–ê–ô–õ–ï –í–´ –ù–ê–ô–î–Å–¢–ï –ö–û–î".to_string(),
        }
    }
}
